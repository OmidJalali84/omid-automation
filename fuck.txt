"use client";

import { useMemo, useState } from 'react';
import Link from 'next/link';
import { useRouter, useParams } from 'next/navigation';
import { restaurants, type RestaurantKey } from '../../data/restaurants';

export default function FreeOrderRestaurantPage() {
  const jettonWorth = 70000;

  type Category = 'برنجی' | 'نوشیدنی' | 'سالاد';
  const categories: Category[] = ['برنجی', 'نوشیدنی', 'سالاد'];
  const [activeCategory, setActiveCategory] = useState<Category>('برنجی');
  const params = useParams();
  const router = useRouter();
  const key = String(params?.slug || '') as RestaurantKey;
  const restaurant = restaurants[key];

  const [cart, setCart] = useState<Record<number, number>>({});

  const addToCart = (id: number) => setCart(prev => ({ ...prev, [id]: (prev[id] || 0) + 1 }));
  const removeFromCart = (id: number) => setCart(prev => {
    const next = { ...prev };
    if (next[id] > 0) {
      next[id] -= 1;
      if (next[id] === 0) delete next[id];
    }
    return next;
  });

  const items = restaurant?.items || [];
  const cartItems = useMemo(() => Object.entries(cart)
    .map(([id, qty]) => {
      const item = items.find(i => i.id === Number(id));
      return item ? { ...item, qty: qty as number } : undefined;
    })
    .filter(Boolean) as Array<(typeof items)[number] & { qty: number }>, [cart, items]);

  const total = cartItems.reduce((s, it) => s + it.price * it.qty, 0);
  const payable = Math.max(0, total - jettonWorth);


  if (!restaurant) {
    return (
      <div className="min-h-screen flex items-center justify-center text-white">
        رستوران یافت نشد
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
      {/* Header */}
      <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-900/80 border-b border-slate-700/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-xl flex items-center justify-center">
                <span className="text-white text-xl">🍴</span>
              </div>
              <div>
                <h1 className="text-white font-bold text-lg">دانشگاه صنعتی سهند</h1>
                <p className="text-slate-400 text-xs">سامانه رزرو و سفارش غذا</p>
              </div>
            </div>
            <Link
              href="/dashboard"
              className="px-4 py-2 bg-slate-800/50 hover:bg-slate-700/50 text-white rounded-xl transition-colors text-sm font-medium border border-slate-700/50"
            >
              بازگشت
            </Link>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex flex-col lg:flex-row gap-6">
          {/* menu Section */}
          <div className="flex-1">
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-3xl p-6 border border-slate-700/50 mb-6">
              <h1 className="text-3xl font-bold text-white mb-2">{restaurant.name}</h1>
              <p className="text-slate-400">{restaurant.description}</p>
            </div>

            {/* Category Pills */}
            <div className="sticky top-20 z-40 bg-slate-900/95 backdrop-blur-xl rounded-2xl p-2 mb-6 border border-slate-700/50">
              <div className="flex gap-2 overflow-x-auto scrollbar-hide">
                {categories.map((cat) => (
                  <button
                    key={cat}
                    onClick={() => setActiveCategory(cat)}
                    className={`px-6 py-3 rounded-xl font-medium whitespace-nowrap transition-all ${
                      activeCategory === cat
                        ? 'bg-gradient-to-r from-emerald-500 to-emerald-600 text-white shadow-lg shadow-emerald-500/30'
                        : 'bg-slate-800/50 text-slate-400 hover:bg-slate-700/50 hover:text-white'
                    }`}
                  >
                    {cat}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Cart Sidebar */}
          <div className="lg:w-96">
            <div className="sticky top-20 bg-slate-800/50 backdrop-blur-xl rounded-3xl p-6 border border-slate-700/50">
              <h2 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                <span className="text-2xl">🛒</span>
                سبد خرید
              </h2>

              {cartItems.length > 0 ? (
                <div className="space-y-3 mb-6 max-h-64 overflow-y-auto">
                  {cartItems.map((item) => (
                    <div key={item.id} className="flex items-center justify-between bg-slate-700/30 rounded-xl p-3">
                      <div className="flex items-center gap-2">
                        <span className="text-2xl">{item.image}</span>
                        <div>
                          <p className="text-white text-sm font-medium">{item.name}</p>
                          <p className="text-slate-400 text-xs">× {item.qty}</p>
                        </div>
                      </div>
                      <p className="text-emerald-400 font-bold text-sm">
                        {(item.price * item.qty).toLocaleString()}
                      </p>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-slate-400">
                  <span className="text-4xl block mb-2">🍽️</span>
                  <p className="text-sm">سبد خرید خالی است</p>
                </div>
              )}

              <div className="border-t border-slate-700/50 pt-4 space-y-3">
                <div className="flex justify-between text-slate-300">
                  <span>جمع سبد</span>
                  <span className="font-bold">{total.toLocaleString()} تومان</span>
                </div>
                <div className="flex justify-between text-emerald-400">
                  <span>ارزش ژتون</span>
                  <span className="font-bold">{jettonWorth.toLocaleString()} تومان</span>
                </div>
                <div className="flex justify-between text-slate-300">
                  <span>مبلغ قابل پرداخت</span>
                  <span className="font-bold">{payable.toLocaleString()} تومان</span>
                </div>
              </div>

              <div className="mt-6 space-y-3">
                <button
                  onClick={() => router.push('/checkout')}
                  disabled={cartItems.length === 0}
                  className="w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 disabled:opacity-30 disabled:cursor-not-allowed text-white py-4 rounded-xl font-bold text-lg transition-all shadow-lg shadow-emerald-500/30 hover:shadow-emerald-500/50"
                >
                  پرداخت و ثبت سفارش
                </button>
                <Link
                  href="/dashboard"
                  className="block w-full bg-slate-700/50 hover:bg-slate-600/50 text-white py-3 rounded-xl font-medium text-center transition-colors"
                >
                  بازگشت به داشبورد
                </Link>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}


